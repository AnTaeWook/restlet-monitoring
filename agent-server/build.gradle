plugins {
    id 'java'
    id 'application'
    id "com.netflix.nebula.ospackage-application" version "11.3.0"
}

group 'org.example'
version '1.0-SNAPSHOT'

repositories {
    mavenCentral()
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

application {
    mainClass = 'org.example.Main'
}

jar {
    manifest {
        attributes 'Main-Class' : 'org.example.Main'
    }
    from {
        configurations.runtimeClasspath.collect {
            it.isDirectory() ? it : zipTree(it)
        }
    }
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
}

dependencies {
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.8.1'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.8.1'

    // xml-rpc
    implementation 'org.apache.xmlrpc:xmlrpc-server:3.1.3'

    // sqlite
    implementation 'org.xerial:sqlite-jdbc:3.41.2.1'

    // scheduler
    implementation 'org.quartz-scheduler:quartz:2.3.2'

    // lombok
    compileOnly 'org.projectlombok:lombok:1.18.26'
    annotationProcessor 'org.projectlombok:lombok:1.18.26'
    testCompileOnly 'org.projectlombok:lombok:1.18.26'
    testAnnotationProcessor 'org.projectlombok:lombok:1.18.26'

    // environment variables
    implementation 'org.apache.commons:commons-configuration2:2.9.0'
    implementation 'commons-beanutils:commons-beanutils:1.9.4'

    // db migration
    implementation 'org.flywaydb:flyway-core:9.8.1'

    // common module
    implementation project(':module-common')

    // assertj
    testImplementation 'org.assertj:assertj-core:3.24.2'

    // zookeeper
    implementation 'org.apache.zookeeper:zookeeper:3.8.1'

    // mockito
    testImplementation 'org.mockito:mockito-core:2.28.2'
    testImplementation 'org.mockito:mockito-junit-jupiter:2.28.2'

    // slf4j
    implementation 'org.slf4j:slf4j-api:1.7.36'

    // log4j
    implementation 'org.apache.logging.log4j:log4j-api:2.20.0'
    implementation 'org.apache.logging.log4j:log4j-core:2.20.0'
    implementation 'org.apache.logging.log4j:log4j-slf4j18-impl:2.18.0'

    // jne
    implementation 'net.java.dev.jna:jna-platform:5.13.0'
}

test {
    useJUnitPlatform()
}

ospackage {
    packageName = 'agent-server'
    license = 'all rights reserved'
    version = project.version + new Date().format('.yyyyMMdd')
    user = 'root'
    release = '2'
    arch = NOARCH
    os = LINUX

    requires("systemd")
    requires("sysstat")
    requires("java-1.8.0-openjdk")

    applicationDefaultJvmArgs += [
            '-Duser.language=en'
    ]

    from(rootDir.toPath().resolve('agent-server/distribution/systemd')) {
        include '*.service'
        into '/usr/lib/systemd/system'
        fileMode = 0644
    }

    from(rootDir.toPath().resolve('agent-server/distribution/systemd')) {
        include '*.preset'
        into '/usr/lib/systemd/system-preset'
        fileMode = 0644
    }

    from(rootDir.toPath().resolve('agent-server/distribution')) {
        include 'agent-properties'
        into '/etc/sysconfig'
        fileMode = 0644
        fileType = CONFIG | NOREPLACE
    }

    preInstall file(rootDir.toPath().resolve('agent-server/distribution/preInstall.sh'))
    postInstall file(rootDir.toPath().resolve('agent-server/distribution/postInstall.sh'))
    preUninstall file(rootDir.toPath().resolve('agent-server/distribution/preUninstall.sh'))
    postUninstall file(rootDir.toPath().resolve('agent-server/distribution/postUninstall.sh'))
}

